1)For Iterative DFS(not recursive) on an undirected graph (cycles and multiple edges between nodes might be present),before processing each node by
popping if of teh stack we should check if the node is already visited.

While adding a node x's edges to the stack  we might exlude adding the nodes if they are already visited.But this in itself 
will not prevent a node from being visited twice.
So even if don't check if the node is already visited before you push it on to the stack ,its fine but before
processing you should check if its already processed.
This issue will not arise in a tree.
https://www.hackerearth.com/problem/algorithm/vasya-and-party/description/

Ex: 1-2 1-3 1-4 1-5 3-5 
In above example if dont check if node is already visited before processing and just check while adding it to the stack,we
will visit 5 twice.Because the check that we perform before adding to the stack is a check on the visited vertices and which
doesnt include vertices present in the stack.

a)http://www.cs.toronto.edu/~heap/270F02/node36.html
      DFS(G,v)   ( v is the vertex where the search starts )
         Stack S := {};   ( start with an empty stack )
         for each vertex u, set visited[u] := false;
         push S, v;
         while (S is not empty) do
            u := pop S;
            if (not visited[u]) then                                    //This is the line which is essential
               visited[u] := true;
               for each unvisited neighbour w of u
                  push S, w;
            end if
         end while
      END DFS()

b)Similarly below,while adding to the stack itself we are marking the nodes as visited and hence this is other way to avoid a node being visited more than once.
https://www.hackerearth.com/notes/graph-theory-part-i/
DFS-iterative (G, s):                                          //where G is graph and s is source vertex.
  let S be stack
  S.push( s )            // inserting s in stack 
  mark s as visited.
  while ( S is not empty):
      // pop a vertex from stack to visit next
      v  =  S.top( )
     S.pop( )
     //push all the neighbours of v in stack that are not visited   
    for all neighbours w of v in Graph G:
        if w is not visited :
                 S.push( w )         
                mark w as visited

c)One more iterative version
www.hackerearth.com/notes/graph-theory-part-i/?scroll-id=comments-320-561&scroll-trigger=inview#c28466
DFS-iterative(G,v): 
      let S be a stack 
      S.push(v) 
      while S is not empty 
            v = S.pop() 
            if v is not labeled as discovered: 
                  label v as discovered 
            for all edges from v to w in G.adjacentEdges(v) do 
                  S.push(w)

Compare above with Recursive DFS https://home.cse.ust.hk/~dekai/271/notes/L06/L06.pdf,https://github.com/crackerplace/techtips/edit/master/dfs

d)https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-graphs-and-their-data-structures-section-2/
same as c)

2)Disjoint sets
Disjoint set union can also be used to find number of connected components in a graph

https://www.hackerearth.com/notes/abhinav92003/disjoint-set-union/
https://www.hackerearth.com/notes/disjoint-set-union-union-find/
https://www.topcoder.com/community/data-science/data-science-tutorials/disjoint-set-data-structures/
https://www.hackerearth.com/problem/algorithm/city-and-flood-1/#
http://www.geeksforgeeks.org/find-the-number-of-islands-set-2-using-disjoint-set/
https://www.hackerearth.com/problem/algorithm/monks-birthday-treat/description/

